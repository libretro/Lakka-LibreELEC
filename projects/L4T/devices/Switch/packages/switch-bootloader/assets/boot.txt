# Set default env variables.
test -n ${reboot_action}                 || setenv reboot_action bootloader
test -n ${hdmi_fbconsole}                || setenv hdmi_fbconsole 1

# Set logging params for each serial type.
test -n {uart_port}                      || setenv uart_port 0
test -n ${usb_logging}                   ||setenv usb_logging 0

setenv uarta "no_console_suspend console=ttyS0,115200,8n1 loglevel=8"
setenv uartb "no_console_suspend console=ttyS1,115200,8n1 loglevel=8"
setenv uartc "no_console_suspend console=ttyS2,115200,8n1 loglevel=8"
setenv usblg "console=ttyGS0,115200,8n1 loglevel=8"
setenv nocon "console=null loglevel=5"

#remove next 2 lines when hekatf releases
test -n ${t210b01}                       || setenv t210b01 0
test -n ${sku}                           || setenv sku 0

test -n ${cec_enable}                    || setenv cec_enable 0
test -n ${performance_mode}              || setenv performance_mode 0
test -n ${dock_freq_switch_enabled}      || setenv dock_freq_switch_enabled 0
test -n ${usb3_disable}                  || setenv usb3_disable 0

# Set kernel load address

#setenv kernload 0xA0000000

# Set SoC info.

if test ${t210b01} = 1; then setenv plat_info T210B01; else setenv plat_info T210; fi

# Set SKU info.

if   test ${sku} = 0; then setenv hw_sku odin
elif test ${sku} = 1; then setenv hw_sku modin
elif test ${sku} = 2; then setenv hw_sku vali
elif test ${sku} = 3; then setenv hw_sku frig; fi

load mmc 1:1 0x83000000 @DISTRO_PATH@/KERNEL
load mmc 1:1 0x8d000000 @DISTRO_PATH@/tegra210-icosa.dtb

# Store dtb filesize
setenv dtb_part_size ${filesize}

setenv ovcfgaddr 0x8d100000
setenv fdtovaddr 0x8d200000

# Load dtb in memory
fdt addr 0x8d000000 ${dtb_part_size}
fdt resize 8192

# select SDCard as main mmc
mmc dev 1

# store SD serial number to use as device serial
mmc info serial#

host_mac_addr=0xff

# load mac address info file
if fatload mmc 1:1 0x90000000 switchroot/joycon_mac.bin; then
    if itest.b *0x90000000 == 0x01; then
        # left joy con is available
        host_mac_addr=0x90000007
    fi

    if itest.b *0x9000001d == 0x02; then
        # right joy con is available
        host_mac_addr=0x90000024
    fi
fi

if itest $host_mac_addr == 0xff; then
    # no joy con is available

    # write to a known good location
    mw.q 0x90000000 ${serial#} 1

    # write crc32 of value at offset 0x3
    crc32 0x90000000 8 0x90000003

    # write nintendo prefix
    mw.b 0x90000000 0x98 1
    mw.b 0x90000001 0xE8 1
    mw.b 0x90000002 0xFA 1

    # use this to generate mac
    host_mac_addr=0x90000000
fi

bt_mac=""
sep=""
for i in 0 1 2 3 4 5 ; do
    setexpr x $host_mac_addr + $i
    setexpr.b b *$x
    if itest $b <= f; then
        # There is no way to have leading zeros, so do this hack
        bt_mac="$bt_mac${sep}0$b"
    else
        bt_mac="$bt_mac$sep$b"
    fi
    sep=":"
done

# FIXME after hekate gets wifi mac reading
setexpr.b last_byte *0x90000005
if itest $last_byte == 0xFF; then
    # wrap around case
    setexpr wifi_mac gsub "(.*:.*:.*:.*:.*:).*" "\\100" $bt_mac
else
    setexpr.b wb $last_byte + 1
    if itest $wb <= f; then
        setexpr wifi_mac gsub "(.*:.*:.*:.*:.*:).*" "\\10$wb" $bt_mac
    else
        setexpr wifi_mac gsub "(.*:.*:.*:.*:.*:).*" "\\1$wb" $bt_mac
    fi
fi

if load mmc 1:1 ${fdtovaddr} @DISTRO_PATH@/uenv.txt && env import -t ${fdtovaddr} ${filesize}; then
  echo Uenv.txt Loaded
fi
# Add additional bootargs for UART Logging.

if   test ${uart_port} = 1; then
    setenv bootargs_extra ${bootargs_extra} ${uarta}; echo Enabled UART-A logging
elif test ${uart_port} = 2; then
    setenv bootargs_extra ${bootargs_extra} ${uartb}; echo Enabled UART-B logging
    fdt set /serial@70006040 compatible nvidia,tegra20-uart
    fdt set /serial@70006040/joyconr status disabled
elif test ${uart_port} = 3; then
    setenv bootargs_extra ${bootargs_extra} ${uartc}; echo Enabled UART-C logging
    fdt set /serial@70006200 compatible nvidia,tegra20-uart
    fdt set /serial@70006200/joyconl status disabled
else
    # Kill console and set default loglevel
    echo UART Disabled
    setenv bootargs_extra ${nocon}
fi

# Add additional bootargs for Serial USB.

if   test ${usb_logging} = 1; then
    echo Enabled USB Serial logging
    setenv bootargs_extra ${usblg} ${bootargs_extra}
fi

fdt set /chosen nvidia,wifi-mac ${wifi_mac}
fdt set /chosen nvidia,bluetooth-mac ${bt_mac}

# Prepare display panel id from Nyx.
cp.b 0xED838002 0xED838001 0x1
mw.b 0xED838002 0x0 0x1

test -n ${display_id} || setexpr.w display_id *0xED838000

# Get display panel handle.
if   test ${display_id} = f20;  then echo Display is INN 6.2; fdt get value DHANDLE /host1x/dsi/panel-i-720p-6-2 phandle
elif test ${display_id} = f30;  then echo Display is AUO 6.2; fdt get value DHANDLE /host1x/dsi/panel-a-720p-6-2 phandle
elif test ${display_id} = 10;   then echo Display is JDI 6.2; fdt get value DHANDLE /host1x/dsi/panel-j-720p-6-2 phandle
elif test ${display_id} = 1020; then echo Display is INN 5.5; fdt get value DHANDLE /host1x/dsi/panel-i-720p-5-5 phandle
elif test ${display_id} = 1030; then echo Display is AUO 5.5; fdt get value DHANDLE /host1x/dsi/panel-a-720p-5-5 phandle
elif test ${display_id} = 1040; then echo Display is SHP 5.5; fdt get value DHANDLE /host1x/dsi/panel-sh-720p-5-5 phandle
elif test ${display_id} = 2050; then echo Display is SAM 7.0
elif test ${sku} = 3;      then echo Display is SAM 7.0
else echoe Unknown Display ID: ${display_id}!; fi

# Set new active display panel handle.
if test -n ${DHANDLE}; then echo Setting Display panel; fdt resize 8192; fdt set /host1x/dsi nvidia,active-panel <$DHANDLE>; fi

# Disable USB3
if test ${usb3_disable} = 1; then
  echo USB3 Disabled
  fdt get value DHANDLE_USB2 /xusb_padctl@7009f000/pads/usb2/lanes/usb2-0 phandle
  fdt set /xusb@70090000 phys <$DHANDLE_USB2>
  fdt set /xusb@70090000 phy-names usb2-0
  fdt set /xudc@700d0000 phys <$DHANDLE_USB2>
  fdt set /xudc@700d0000 phy-names usb2
  fdt set /xusb_padctl@7009f000/ports/usb2-0 nvidia,usb3-port-fake <0xffffffff>
  fdt set /xusb_padctl@7009f000/ports/usb3-0 status disabled
fi

setenv bootargs ${bootargs_extra} "boot=/dev/mmcblk0p1 BOOT_IMAGE=@DISTRO_PATH@/KERNEL SYSTEM_IMAGE=@DISTRO_PATH@/SYSTEM ${@DISTRO_PATH@_boot_options} nofsck fat32-boot cec_enabled=${cec_enable} \
 dock_freq_switch_enabled=${dock_freq_switch_enabled} performance_mode=${performance_mode} \
 firmware_class.path=/usr/lib/firmware \
 pmc_reboot2payload.enabled=1 \
 pmc_reboot2payload.reboot_action=${reboot_action} \
 pmc_reboot2payload.default_payload=reboot_payload.bin \
 pmc_reboot2payload.hekate_config_id=@DISTRO_ID@ \
 vpr_resize nvdec_enabled=0 tegra_fbmem=0x384000@0xf5a00000 access=m2 \
 consoleblank=0 fbcon=map:${hdmi_fbconsole} "

booti 0x83000000 - 0x8d000000
