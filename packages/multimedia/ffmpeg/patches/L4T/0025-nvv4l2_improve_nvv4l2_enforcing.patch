From 09971bcb893a76b536184fba408199cbd6ce1e54 Mon Sep 17 00:00:00 2001
From: CTCaer <ctcaer@gmail.com>
Date: Sun, 2 Jul 2023 03:18:28 +0000
Subject: [PATCH] fftools: improve nvv4l2 enforcing Now non-supported pixel
 formats are properly handled. Additionally, all edge cases are handled even
 if the codec is forced by user.

---
 fftools/ffmpeg_opt.c | 69 ++++++++++++++++++++++++++++++++++-------
 fftools/ffplay.c     | 74 ++++++++++++++++++++++++++++++++++----------
 2 files changed, 116 insertions(+), 27 deletions(-)

diff --git a/fftools/ffmpeg_opt.c b/fftools/ffmpeg_opt.c
index d6f28bda235..3df29c17a80 100644
--- a/fftools/ffmpeg_opt.c
+++ b/fftools/ffmpeg_opt.c
@@ -769,33 +769,80 @@ static AVCodec *find_codec_or_die(const char *name, enum AVMediaType type, int e
 static const AVCodec *choose_decoder(OptionsContext *o, AVFormatContext *s, AVStream *st)
 {
     char *codec_name = NULL;
+#if CONFIG_NVV4L2
+    int nvv4l2_pix_fmt_ok;
+#endif
 
     MATCH_PER_STREAM_OPT(codec_names, str, codec_name, s, st);
 
 #if CONFIG_NVV4L2
-    /* Reset requested decoder in order to enforce NVV4L2 if possible. */
-    if (codec_name) {
+    nvv4l2_pix_fmt_ok = st->codecpar->format == AV_PIX_FMT_NONE ||
+                        st->codecpar->format == AV_PIX_FMT_NV12 ||
+                        st->codecpar->format == AV_PIX_FMT_YUV420P;
+
+    /* Force software decoding if codec name not defined and pixel format not supported. */
+    if (!codec_name && !nvv4l2_pix_fmt_ok) {
+        switch (st->codecpar->codec_id) {
+        case AV_CODEC_ID_H264:
+            codec_name = (char *)"h264";
+            break;
+        case AV_CODEC_ID_HEVC:
+            codec_name = (char *)"hevc";
+            break;
+        case AV_CODEC_ID_MPEG2VIDEO:
+            codec_name = (char *)"mpeg2video";
+            break;
+        case AV_CODEC_ID_MPEG4:
+            codec_name = (char *)"mpeg4";
+            break;
+        case AV_CODEC_ID_VP8:
+            codec_name = (char *)"vp8";
+            break;
+        case AV_CODEC_ID_VP9:
+            codec_name = (char *)"vp9";
+            break;
+        }
+    }
+#endif
+
+    if (!codec_name)
+        return avcodec_find_decoder(st->codecpar->codec_id);
+
+#if CONFIG_NVV4L2
+    if (nvv4l2_pix_fmt_ok) {
+        /* Force hardware decoding if pixel format supported. */
         if (strcmp(codec_name, "h264") == 0)
-            return avcodec_find_decoder(st->codecpar->codec_id);   
+            return avcodec_find_decoder(st->codecpar->codec_id);
         else if (strcmp(codec_name, "hevc") == 0)
-            return avcodec_find_decoder(st->codecpar->codec_id); 
+            return avcodec_find_decoder(st->codecpar->codec_id);
         else if (strcmp(codec_name, "mpeg2video") == 0)
             return avcodec_find_decoder(st->codecpar->codec_id);
         else if (strcmp(codec_name, "mpeg4") == 0)
             return avcodec_find_decoder(st->codecpar->codec_id);
         else if (strcmp(codec_name, "vp8") == 0)
             return avcodec_find_decoder(st->codecpar->codec_id);
-        else if (strcmp(codec_name, "vp9") == 0 && st->codecpar->format != AV_PIX_FMT_YUV420P10)
+        else if (strcmp(codec_name, "vp9") == 0)
             return avcodec_find_decoder(st->codecpar->codec_id);
+    } else {
+        /* Force software decoding if pixel format not supported. */
+        if (strcmp(codec_name, "h264_nvv4l2") == 0)
+            codec_name = (char *)"h264";
+        else if (strcmp(codec_name, "hevc_nvv4l2") == 0)
+            codec_name = (char *)"hevc";
+        else if (strcmp(codec_name, "mpeg2video_nvv4l2") == 0)
+            codec_name = (char *)"mpeg2video";
+        else if (strcmp(codec_name, "mpeg4_nvv4l2") == 0)
+            codec_name = (char *)"mpeg4";
+        else if (strcmp(codec_name, "vp8_nvv4l2") == 0)
+            codec_name = (char *)"vp8";
+        else if (strcmp(codec_name, "vp9_nvv4l2") == 0)
+            codec_name = (char *)"vp9";
     }
 #endif
 
-    if (codec_name) {
-        const AVCodec *codec = find_codec_or_die(codec_name, st->codecpar->codec_type, 0);
-        st->codecpar->codec_id = codec->id;
-        return codec;
-    } else
-        return avcodec_find_decoder(st->codecpar->codec_id);
+    const AVCodec *codec = find_codec_or_die(codec_name, st->codecpar->codec_type, 0);
+    st->codecpar->codec_id = codec->id;
+    return codec;
 }
 
 /* Add all the streams from the given input file to the global
diff --git a/fftools/ffplay.c b/fftools/ffplay.c
index e1c7b741b95..65a0e3a66f3 100644
--- a/fftools/ffplay.c
+++ b/fftools/ffplay.c
@@ -2581,6 +2581,9 @@ static int stream_component_open(VideoState *is, int stream_index)
     int64_t channel_layout;
     int ret = 0;
     int stream_lowres = lowres;
+#if CONFIG_NVV4L2
+    int nvv4l2_pix_fmt_ok;
+#endif
 
     if (stream_index < 0 || stream_index >= ic->nb_streams)
         return -1;
@@ -2604,26 +2607,65 @@ static int stream_component_open(VideoState *is, int stream_index)
 
 #if CONFIG_NVV4L2
     /* Reset requested decoder in order to enforce NVV4L2 if possible. */
+    nvv4l2_pix_fmt_ok = avctx->pix_fmt == AV_PIX_FMT_NONE ||
+                        avctx->pix_fmt == AV_PIX_FMT_NV12 ||
+                        avctx->pix_fmt == AV_PIX_FMT_YUV420P;
+
     if (avctx->codec_type == AVMEDIA_TYPE_VIDEO && forced_codec_name) {
-        if (strcmp(forced_codec_name, "h264") == 0)
-            forced_codec_name = NULL;    
-        else if (strcmp(forced_codec_name, "hevc") == 0)
-            forced_codec_name = NULL; 
-        else if (strcmp(forced_codec_name, "mpeg2video") == 0)
-            forced_codec_name = NULL;
-        else if (strcmp(forced_codec_name, "mpeg4") == 0)
-            forced_codec_name = NULL;
-        else if (strcmp(forced_codec_name, "vp8") == 0)
-            forced_codec_name = NULL;
-        else if (strcmp(forced_codec_name, "vp9") == 0 &&
-                 avctx->pix_fmt != AV_PIX_FMT_YUV420P10) {
-            forced_codec_name = NULL;
+        if (nvv4l2_pix_fmt_ok) {
+            /* Force hardware decoding if pixel format supported. */
+            if (strcmp(forced_codec_name, "h264") == 0)
+                forced_codec_name = NULL;
+            else if (strcmp(forced_codec_name, "hevc") == 0)
+                forced_codec_name = NULL;
+            else if (strcmp(forced_codec_name, "mpeg2video") == 0)
+                forced_codec_name = NULL;
+            else if (strcmp(forced_codec_name, "mpeg4") == 0)
+                forced_codec_name = NULL;
+            else if (strcmp(forced_codec_name, "vp8") == 0)
+                forced_codec_name = NULL;
+            else if (strcmp(forced_codec_name, "vp9") == 0)
+                forced_codec_name = NULL;
+        } else {
+            /* Force software decoding if pixel format not supported. */
+            if (strcmp(forced_codec_name, "h264_nvv4l2") == 0)
+                forced_codec_name = (char *)"h264";
+            else if (strcmp(forced_codec_name, "hevc_nvv4l2") == 0)
+                forced_codec_name = (char *)"hevc";
+            else if (strcmp(forced_codec_name, "mpeg2video_nvv4l2") == 0)
+                forced_codec_name = (char *)"mpeg2video";
+            else if (strcmp(forced_codec_name, "mpeg4_nvv4l2") == 0)
+                forced_codec_name = (char *)"mpeg4";
+            else if (strcmp(forced_codec_name, "vp8_nvv4l2") == 0)
+                forced_codec_name = (char *)"vp8";
+            else if (strcmp(forced_codec_name, "vp9_nvv4l2") == 0)
+                forced_codec_name = (char *)"vp9";
         }
     }
 
-    /* NVV4L2 does not support VP9 with YUV420P10. */
-    if (!forced_codec_name && avctx->pix_fmt == AV_PIX_FMT_YUV420P10)
-        forced_codec_name = "vp9";
+    /* Force software decoding if codec name not defined and pixel format not supported. */
+    if (avctx->codec_type == AVMEDIA_TYPE_VIDEO && !forced_codec_name && !nvv4l2_pix_fmt_ok) {
+        switch (avctx->codec_id) {
+        case AV_CODEC_ID_H264:
+            forced_codec_name = (char *)"h264";
+            break;
+        case AV_CODEC_ID_HEVC:
+            forced_codec_name = (char *)"hevc";
+            break;
+        case AV_CODEC_ID_MPEG2VIDEO:
+            forced_codec_name = (char *)"mpeg2video";
+            break;
+        case AV_CODEC_ID_MPEG4:
+            forced_codec_name = (char *)"mpeg4";
+            break;
+        case AV_CODEC_ID_VP8:
+            forced_codec_name = (char *)"vp8";
+            break;
+        case AV_CODEC_ID_VP9:
+            forced_codec_name = (char *)"vp9";
+            break;
+        }
+    }
 #endif
 
     if (forced_codec_name)
-- 
GitLab

