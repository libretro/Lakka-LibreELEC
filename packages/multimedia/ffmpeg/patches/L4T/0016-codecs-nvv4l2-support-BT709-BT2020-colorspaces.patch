From 628d01310250a97fc874f3acb9405460b57e679d Mon Sep 17 00:00:00 2001
From: CTCaer <ctcaer@gmail.com>
Date: Tue, 14 Jun 2022 19:21:20 +0000
Subject: [PATCH 16/39] codecs: nvv4l2: support BT709/BT2020 colorspaces

---
 libavcodec/nvv4l2_dec.c       | 62 ++++++++++++++++++++++++-----------
 libavcodec/nvv4l2_ext_utils.h | 24 +++++++++-----
 2 files changed, 58 insertions(+), 28 deletions(-)

diff --git a/libavcodec/nvv4l2_dec.c b/libavcodec/nvv4l2_dec.c
index bd4650ac7a..614a56e04b 100644
--- a/libavcodec/nvv4l2_dec.c
+++ b/libavcodec/nvv4l2_dec.c
@@ -285,15 +285,45 @@ static void query_set_capture(AVCodecContext *avctx, nvv4l2_ctx_t *ctx)
         min_cap_buffers = ctl.value;
     }
 
-    /* Set quantization type. */
-    if (format.fmt.pix_mp.quantization == V4L2_QUANTIZATION_DEFAULT) {
+    /* Set color format based on colorspace and quantization type. */
+    switch(format.fmt.pix_mp.colorspace)
+    {
+    case V4L2_COLORSPACE_REC709:
+        if (format.fmt.pix_mp.quantization == V4L2_QUANTIZATION_DEFAULT)
+        {
+            av_log(avctx, AV_LOG_VERBOSE,
+                "Colorspace ITU-R BT.709 with standard range luma (16-235)\n");
+            cParams.colorFormat = NvBufferColorFormat_NV12_709;
+        }
+        else
+        {
+            av_log(avctx, AV_LOG_VERBOSE,
+                "Colorspace ITU-R BT.709 with extended range luma (0-255)\n");
+            cParams.colorFormat = NvBufferColorFormat_NV12_709_ER;
+        }
+        break;
+    case V4L2_COLORSPACE_BT2020:
         av_log(avctx, AV_LOG_VERBOSE,
-            "Colorspace ITU-R BT.601 with standard range luma (16-235)\n");
-        cap_params.colorFormat = NvBufferColorFormat_NV12;
-    } else {
+               "Colorspace ITU-R BT.2020\n");
+        cParams.colorFormat = NvBufferColorFormat_NV12_2020;
+        break;
+    default:
         av_log(avctx, AV_LOG_VERBOSE,
-            "Colorspace ITU-R BT.601 with extended range luma (0-255)\n");
-        cap_params.colorFormat = NvBufferColorFormat_NV12_ER;
+               "Colorspace details are missing, using default\n");
+    case V4L2_COLORSPACE_SMPTE170M:
+        if (format.fmt.pix_mp.quantization == V4L2_QUANTIZATION_DEFAULT)
+        {
+            av_log(avctx, AV_LOG_VERBOSE,
+                "Colorspace ITU-R BT.601 with standard range luma (16-235)\n");
+            cParams.colorFormat = NvBufferColorFormat_NV12;
+        }
+        else
+        {
+            av_log(avctx, AV_LOG_VERBOSE,
+                "Colorspace ITU-R BT.601 with extended range luma (0-255)\n");
+            cParams.colorFormat = NvBufferColorFormat_NV12_ER;
+        }
+        break;
     }
 
     /* Increment color format if NvBuffer is newer. */
@@ -303,19 +333,13 @@ static void query_set_capture(AVCodecContext *avctx, nvv4l2_ctx_t *ctx)
     /* Request number of buffers returned by ctrl, plus 10 more. */
     ctx->cp_num_buffers = min_cap_buffers + 10;
 
-    /* Create DMA Buffers by defining the parameters for the HW Buffer.
-     ** @payloadType defines the memory handle for the NvBuffer, here
-     ** defined for the set of planes.
-     ** @nvbuf_tag identifies the type of device or component
-     ** requesting the operation.
-     ** @layout defines memory layout for the surfaces, either Pitch/BLockLinear.
-     */
+    /* Create DMA Buffers by defining the parameters for the HW Buffer. */
+    cap_params.width = crop.c.width;
+    cap_params.height = crop.c.height;
+    cap_params.layout = NvBufferLayout_BlockLinear;
+    cap_params.payloadType = NvBufferPayload_SurfArray;
+    cap_params.nvbuf_tag = NvBufferTag_VIDEO_DEC;
     for (uint32_t i = 0; i < ctx->cp_num_buffers; i++) {
-        cap_params.width = crop.c.width;
-        cap_params.height = crop.c.height;
-        cap_params.layout = NvBufferLayout_BlockLinear;
-        cap_params.payloadType = NvBufferPayload_SurfArray;
-        cap_params.nvbuf_tag = NvBufferTag_VIDEO_DEC;
         ret = NvBufferCreateEx(&ctx->dmabuff_fd[i], &cap_params);
         if (ret) {
             av_log(avctx, AV_LOG_ERROR, "Failed to create buffers!\n");
diff --git a/libavcodec/nvv4l2_ext_utils.h b/libavcodec/nvv4l2_ext_utils.h
index 80918497f1..007306ccc5 100644
--- a/libavcodec/nvv4l2_ext_utils.h
+++ b/libavcodec/nvv4l2_ext_utils.h
@@ -2129,23 +2129,29 @@ typedef enum
 typedef enum
 {
   /** BT.601 colorspace - YUV420 multi-planar. */
-  NvBufferColorFormat_YUV420    = 0,
+  NvBufferColorFormat_YUV420      = 0,
   /** BT.601 colorspace - YUV420 ER multi-planar. */
-  NvBufferColorFormat_YUV420_ER = 2, /* BSP 32.5.0 and up: 3 */
+  NvBufferColorFormat_YUV420_ER   = 2,  /* BSP 32.5.0 and up: 3 */
   /** BT.601 colorspace - Y/CbCr 4:2:0 multi-planar. */
-  NvBufferColorFormat_NV12      = 4, /* BSP 32.5.0 and up: 5 */
+  NvBufferColorFormat_NV12        = 4,  /* BSP 32.5.0 and up: 5 */
   /** BT.601 colorspace - Y/CbCr ER 4:2:0 multi-planar. */
-  NvBufferColorFormat_NV12_ER   = 5, /* BSP 32.5.0 and up: 6 */
+  NvBufferColorFormat_NV12_ER     = 5,  /* BSP 32.5.0 and up: 6 */
   /** LegacyRGBA colorspace - BGRA-8-8-8-8 planar. */
-  NvBufferColorFormat_ABGR32    = 16, /* BSP 32.5.0 and up: 17 */
+  NvBufferColorFormat_ABGR32      = 16, /* BSP 32.5.0 and up: 17 */
   /** LegacyRGBA colorspace - XRGB-8-8-8-8 planar. */
-  NvBufferColorFormat_XRGB32    = 17, /* BSP 32.5.0 and up: 18 */
+  NvBufferColorFormat_XRGB32      = 17, /* BSP 32.5.0 and up: 18 */
   /** LegacyRGBA colorspace - ARGB-8-8-8-8 planar. */
-  NvBufferColorFormat_ARGB32    = 18, /* BSP 32.5.0 and up: 19 */
+  NvBufferColorFormat_ARGB32      = 18, /* BSP 32.5.0 and up: 19 */
   /** BT.601 colorspace - Y/CbCr 4:2:0 10-bit multi-planar. */
-  NvBufferColorFormat_NV12_10LE = 19, /* BSP 32.5.0 and up: 20 */
+  NvBufferColorFormat_NV12_10LE   = 19, /* BSP 32.5.0 and up: 20 */
+  /** BT.709 colorspace - Y/CbCr 4:2:0 multi-planar. */
+  NvBufferColorFormat_NV12_709    = 29, /* BSP 32.5.0 and up: 30 */
+  /** BT.709 colorspace - Y/CbCr ER 4:2:0 multi-planar. */
+  NvBufferColorFormat_NV12_709_ER = 30, /* BSP 32.5.0 and up: 31 */
+  /** BT.2020 colorspace - Y/CbCr 4:2:0 multi-planar. */
+  NvBufferColorFormat_NV12_2020   = 32, /* BSP 32.5.0 and up: 33 */
   /** BT.601 colorspace - YUV444 multi-planar. */
-  NvBufferColorFormat_YUV444    = 35, /* BSP 32.5.0 and up: 36. BSP 34.1.0 and up: 34 */
+  NvBufferColorFormat_YUV444      = 35, /* BSP 32.5.0 and up: 36. BSP 34.1.0 and up: 34 */
 } NvBufferColorFormat;
 
 /**
-- 
2.25.1

